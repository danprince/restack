const _ = require('../../util');

/**
 * Takes an expression node (presumably from the root of the CST
 * generated by parse) iterates over it to remove intemediary
 * syntax nodes.
 *
 * This function recurses down the tree, so it can be used to
 * remove/replace nodes at any depth.
 *
 * @param {Node} expression The root node for the syntax tree
 * that should be reduced.
 *
 * @return {Node} The reduced syntax node.
 */
function reduction(node) {
  if(_.isExpression(node)) {
    const terms = node.terms;
    node.terms = node.terms.map(reduction).filter(n => n !== null);
    return node;
  }
  else if(_.isTerm(node)) {
    return reduction(node.value);
  }
  else if(_.isBlock(node)) {
    node.expression = reduction(node.expression);
    return node;
  }
  else if(_.isLiteral(node)) {
    // drop the literal node and instead
    // return its inner value
    return reduction(node.value);
  }
  else if(_.isSymbol(node)) {
    // make a symbol.name property
    node.name = node.raw;
    return node;
  }
  else if(_.isNumber(node)) {
    node.value = parseFloat(node.raw);
    return node;
  }
  else if(_.isString(node)) {
    node.value = node.raw.slice(1, -1);
    return node;
  }
  else if(_.isComment(node)) {
    return null;
  }
  else if(_.isBlockComment(node)) {
    return null;
  }

  return node;
}

module.exports = reduction;

